{"name":"Dictyostelium Conference Website","tagline":"Ruby on Rails web application for the Annual Dictyostelium International Conference","body":"\r\n## Web application for Dictyostelium International Conference\r\nRuby on Rails web application for the Annual Dictyostelium International Conference\r\n\r\n[![Build Status](https://secure.travis-ci.org/dictyBase/dictyconference.png?branch=feature/dicty13)](https://travis-ci.org/dictyBase/dictyconference) [![Coverage Status](https://coveralls.io/repos/dictyBase/dictyconference/badge.png?branch=feature/dicty13)](https://coveralls.io/r/dictyBase/dictyconference) [![Dependency Status](https://gemnasium.com/dictyBase/dictyconference.png)](https://gemnasium.com/dictyBase/dictyconference)\r\n\r\n#### Getting started\r\n\r\n##### Cloning the repository\r\nTo begin with clone the repository from [Github/dictyconference](https://github.com/dictyBase/dictyconference).\r\n \r\n```shell\r\ngit clone git://github.com/dictyBase/dictyconference.git\r\n```\r\nThen switch to the ```develop``` branch\r\n\r\n```shell\r\ncd dictyconference\r\ngit checkout develop\r\n```\r\n\r\n#### Configuration\r\n\r\n##### [reCAPTCHA](https://www.google.com/recaptcha)\r\n\r\n##### bcdatabase\r\n[NUBIC](http://www.nucats.northwestern.edu/clinical-research-resources/data-collection-biomedical-informatics-and-nubic/bioinformatics-overview.html) has a library and utility called [```bcdatabase```](https://github.com/NUBIC/bcdatabase) which provides database configuration parameter management for Ruby on Rails applications. It provides a simple mechanism for separating database configuration attributes from application source code so that there's no temptation to check passwords into the version control system.\r\n\r\nBefore we can use this gem we have to modify the ```Gemfile``` to add the following source and gem\r\n\r\n```ruby\r\ngem 'bcdatabase', '1.2.3'\r\n```\r\n\r\nIf you want to use `bcdatabase` for the `staging` your application, your `./config/database.yml` file will look like this\r\n\r\n```yaml\r\n<%\r\n  require 'bcdatabase'\r\n  bcdb = Bcdatabase.load\r\n%>\r\n\r\ndevelopment:\r\n  adapter: sqlite3\r\n  database: db/development.sqlite3\r\n  pool: 5\r\n  timeout: 5000\r\n\r\ntest:\r\n  adapter: sqlite3\r\n  database: db/test.sqlite3\r\n  pool: 5\r\n  timeout: 5000\r\n\r\nproduction:\r\n  adapter: sqlite3\r\n  database: db/production.sqlite3\r\n  pool: 5\r\n  timeout: 5000\r\n\r\n<%= bcdb.staging :pstage, 'dictyConf' %>\r\n```\r\n\r\nThe `pstage` parameter points to a configuration block `dictyConf` in a YAML file `/etc/nubic/db/pstage.yml` (on your staging server). This configuration block which will have the actual database configuration looks like\r\n\r\n```yaml\r\ndictyConf:\r\n  database: <db_name>\r\n  username: <db_user>\r\n  epassword: <encrypted_password>\r\n```\r\n\r\nAlso for the ```bcdb.staging``` (from ERB block) to work, you will have to create a ```staging.rb``` file in ```./config/environments/```\r\n\r\n```shell\r\ncp development.rb staging.rb\r\n```\r\n\r\n#### Tests\r\n\r\nTo use `rspec`, add following to the `Gemfile`\r\n\r\n```ruby\r\ngem \"rspec-rails\", \">= 2.0.1\", :group => [:development, :test]\r\ngem 'assert_difference', :group => [:test]\r\n```\r\n\r\n##### Coveralls for code coverage\r\n\r\nAdd this to your `Gemfile`, \r\n\r\n```ruby\r\ngem 'coveralls', require: false\r\n```\r\n\r\n### Final steps\r\nInstall all the dependencies using ```bundler```\r\n\r\n```bash\r\nbundle install\r\n```\r\n\r\nAnd before you deploy you will have to migrate your database under the staging environment.\r\n\r\n```rails\r\nRAILS_ENV=staging rake db:migrate\r\n```\r\n\r\nAsk your system administrator to setup your application with Apache server and you are good to go.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}